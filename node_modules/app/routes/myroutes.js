// ---------------------------------------------------------
// get an instance of the router for api routes
// ---------------------------------------------------------

module.exports=function(app,jwt,User,Product,Order,Profile,Job,JobApp,fileUpload) {
	 var express 	= require('express');
	 var path = require('path');

var apiRoutes = express.Router(); 

var curr_user="";

// ---------------------------------------------------------
// authentication (no middleware necessary since this isnt authenticated)
// ---------------------------------------------------------
// http://localhost:8080/api/authenticate
apiRoutes.post('/authenticate', function(req, res) {

console.log('imcong user' + req.body.email);

	// find the user
	User.findOne({
		email: req.body.email
	}, function(err, user) {

		if (err) throw err;

		if (!user) {
			res.json({ success: false, message: 'Authentication failed. User not found.' });
		} else if (user) {

			// check if password matches
			if (user.password != req.body.password) {
				res.json({ success: false, message: 'Authentication failed. Wrong password.' });
			} else {

				// if user is found and password is right
				// create a token
				var token = jwt.sign(user, app.get('superSecret'), {
					expiresIn: 86400 // expires in 24 hours
				});

				res.json({
					success: true,
					message: 'Logged in',
					token: token,
					type : user.type
				});
					// res.render(path.join(__dirname + '/../../web/index.html'));
			}		

		}

	});
});

// ---------------------------------------------------------
// route middleware to authenticate and check token
// ---------------------------------------------------------
apiRoutes.use(function(req, res, next) {

      //console.log('in Router');

	// check header or url parameters or post parameters for token
	var token = req.body.token || req.param('token') || req.headers['x-access-token'];


   //  console.log('in Router'+ token);

	// decode token
	if (token) {

		// verifies secret and checks exp
		jwt.verify(token, app.get('superSecret'), function(err, decoded) {			
			if (err) {
				return res.json({ success: false, message: 'Failed to authenticate token.' });		
			} else {
				// if everything is good, save to request for use in other routes
				req.decoded = decoded;	
				console.log("Loggedin user" +decoded._doc._id);
				curr_user=decoded._doc._id;
				next();
			}
		});

	} else {

		// if there is no token
		// return an error
		return res.status(403).send({ 
			success: false, 
			message: 'No token provided.'
		});
		
	}
	
});

// ---------------------------------------------------------
// authenticated routes
// ---------------------------------------------------------


apiRoutes.post('/users', function(req, res) {
	User.find({}, function(err, users) {
		res.json(users);
	});
});

apiRoutes.post('/addProduct', function(req, res) {
	var product=new Product({
		name : req.body.name,
		description: req.body.desc,
		price: req.body.price,
		userid :req.decoded._doc.email
	});
	product.save(function(err) {
		if (err) {
            console.log("error");
            res.send('Error in saving product'+ err);
        }else{
		    console.log('proudct added');
		res.json({ success: true });
        }
	});
});

apiRoutes.post('/addOrder', function(req, res) {
	var data=req.body.order;

console.log("data is " + data.items[0] + "," + data.status);

	var order=new Order({
	clientid: [data.clientid],
    status: [data.status], 
    items : data.items,
    userid: [data.userid]
	});
	order.save(function(err) {
		if (err) {
            console.log("error");
            res.send('Error in creating order'+ err);
        }else{
		    console.log('order added');
		res.json({ success: true });
        }
	});

//	console.log('data' + data.order.clientid);
//	res.send("got it");
});

apiRoutes.post('/updateOrderStatus/:oid/:status', function(req, res) {
	var data=req.body.order;

//console.log("data is " + data.items[0] + "," + data.status);
Order.findByIdAndUpdate(req.params.oid, { $set: { status: req.params.status }}, function (err, tank) {
  if (err) {
	  	res.json({ success: false });
  }
 		res.json({ success: true });
});

//	console.log('data' + data.order.clientid);
//	res.send("got it");
});


apiRoutes.post('/listMyProducts', function(req, res) {
Product.find({userid:req.decoded._doc.email}, function(err, users) {
		res.json(users);
	});
});

apiRoutes.post('/searchProducts/:fld/:q', function(req, res) {
Product.find({[req.params.fld]:new RegExp(req.params.q)}, function(err, users) {
		res.json(users);
	});
});

apiRoutes.get('/check', function(req, res) {
	res.json(req.decoded);
});

// Vendor Routes //
apiRoutes.post('/vendor/profile/add', function(req, res) {
		var data=req.body.profile;
		console.log("data is " + req.body.profile);

			var profile=new Profile({
			fname: [data.fname],
			lname: [data.lname],
			dob: [data.dob], 
			coverletter:[data.coverletter],
			email:[data.email],
			phone:[data.phone],
			skillset : data.skillset,
			vendor_id: [curr_user]
			});

			profile.save(function(err) {
				if (err) {
					console.log("error");
					res.send('Error in creating profile'+ err);
				}else{
					console.log('profile added');
				res.json({ success: true, pid:profile._id });
				}
	});
});

apiRoutes.post('/upload', function(req, res) {
  "use strict";
console.log('in upload' + req.param('pid'));

	if (!req.files)
    	return res.status(400).send('No files were uploaded.');

		let sampleFile = req.files.sampleFile;
		var file_name=path.join(__dirname+'../../resumes/' +req.param('pid') + '.docx');
		console.log(file_name);
  // Use the mv() method to place the file somewhere on your server 
  sampleFile.mv(file_name, function(err) {
    if (err)
      return res.status(500).send(err);
 
  res.json({ success: true });
})
});

app.post('/downloadCV/:docid', function(req, res){
	  "use strict";
//	console.log(req.params.docid);
	var dwDoc=(req.params.docid) + ".docx" ;
	console.log('value is '+ dwDoc);
	// var docid=req.params.docid+ '.docx';
 var file = __dirname + '../../resumes/'+dwDoc;
 res.download(file); // Set disposition and send it.
// res.send("ok");
});

apiRoutes.post('/vendor/profile/delete/:pid', function(req, res) {
	Profile.findOneAndRemove({_id : req.params.pid}, function (err,offer){
			if (err) {
					console.log("error");
					res.send('Error in deleting profile'+ err);
				}else{
					console.log('profile deleted');
				res.json({ success: true });
				}
  });
});

apiRoutes.post('/vendor/profile/list', function(req, res) {
	Profile.find({vendor_id:curr_user}, function(err, profiles) {
		res.json(profiles);
	});

});

apiRoutes.post('/vendor/profile/view/:pid', function(req, res) {
	Profile.find({_id:req.params.pid}, function(err, profiles) {
		res.json(profiles);
	});

});



// End Vendor Routes//


// Org Routes //

apiRoutes.post('/org/jobs/add', function(req, res) {
		var data=req.body.job;
	//	console.log("data is " + req.body.job);

			var job=new Job({
			title: [data.title],
			desc: [data.desc], 
			org_id : curr_user,
			skillset : data.skillset,
			location: data.location
			});

			job.save(function(err) {
				if (err) {
					res.json({ success: false });
				}else{
					//console.log('Job added');
					res.json({ success: true });
				}
	});
});



apiRoutes.post('/org/jobs/delete/:jid', function(req, res) {
	Job.findOneAndRemove({_id : req.params.jid}, function (err,offer){
			if (err) {
					console.log("error");
					res.send('Error in deleting profile'+ err);
				}else{
					console.log('profile deleted');
				res.json({ success: true });
				}
  });
});

apiRoutes.post('/org/jobs/list/:jid', function(req, res) {	
	console.log("Current User" + curr_user);
	var tempary=[];
	Job.find({org_id:curr_user}, function(err, profiles) {

		tempary=profiles;

		

		// 	for (var i = 0, len = tempary.length; i < len; i++) {
 				
		// 		  	JobApp.aggregate(	 {
        //     $match: {
        //         job_id: profiles[i]._id            }
        // },					  		
		// 						 {$group: {_id:null,  count: {$sum: 1}}},function(err, users) {
		// 							  console.log(profiles[i]._id);
		// 							console.log(JSON.stringify(users[0].count));
		// 							// if(users!= undefined && users[0].count>1){
		// 							// tempary[i].push[{'count' :users[0].count}]; 
		// 							// console.log('data is ' + JSON.stringify(tempary[i]));
		// 							// }

		// 			//	res.json(users);
		// 			});
				  
		// 	}	

			res.json(profiles);
	});
});

apiRoutes.post('/org/jobs/getappcount', function(req, res) {	
	console.log("Current User" + req.body.job_id);

 				
				  	JobApp.find({'job_id':req.body.job_id},function(err, users) {
									
									 if(users!== undefined){
									// tempary[i].push[{'count' :users[0].count}]; 
									// console.log('data is ' + JSON.stringify(tempary[i]));
									res.json({'count':users.length});
									}else{	res.json({'count':'0'});
									}
		// 			});
				  
		// 	}	

			//res.json(profiles);
	});
});



apiRoutes.post('/org/jobs/view/:jid', function(req, res) {
	Job.find({_id:req.params.jid}, function(err, profiles) {
		res.json(profiles);
	});

})	

// End Ord Routes//


//start JOB actions routes

apiRoutes.post('/jobs/search/:fld/:q', function(req, res) {
	
	Job.find({[req.params.fld]:new RegExp(req.params.q)}, function(err, users) {
		res.json(users);
	});

})	


apiRoutes.post('/jobs/find/:q', function(req, res) {
	console.log("q=" + req.params.q );
	Job.find ({ $or:[ {'title': { $regex: new RegExp( req.params.q, "i") } }, {'desc': { $regex: new RegExp( req.params.q, "i") } }]}, function(err, users) {
		res.json(users);
	});

})	


apiRoutes.post('/jobs/apply', function(req, res) {
		var data=req.body.jobapply;
		console.log("data is " + req.body.jobapply.status);

			var jobapp=new JobApp({
								job_id: data.job_id, 
								org_id: data.org_id, 
								vendor_id : curr_user,
								profile_id: data.profile_id,
								status : "Submitted",
								rate: data.rate,
			});

			jobapp.save(function(err) {
				if (err) {
						if(err.code=="11000"){
							res.json({ success:false, msg: "application already submitted" });
						}

				}else{
					console.log('job applied');
				res.json({ success: true });
				}
	});

})

apiRoutes.post('/jobsapp/listbyvendor', function(req, res) {	
		var data=req.body.jobapply;
			console.log("job id is=" + req.body.job_id );
	JobApp.find({job_id:req.body.job_id,vendor_id: curr_user }).populate('profile_id').exec(function(err, users) {
			
		res.json(users);
	});
})

apiRoutes.post('/jobsapp/listbyjobid', function(req, res) {	
		var data=req.body.jobapply;
			console.log("job id is=" + req.body.job_id );
	JobApp.find({job_id:req.body.job_id}).populate('profile_id').exec(function(err, users) {
			
		res.json(users);
	});
})


apiRoutes.post('/jobsapp/vendordash', function(req, res) {	
		var data=req.body.jobapply;
			console.log("job id is=" + req.body.job_id );
	JobApp.find({vendor_id: curr_user }).sort([['create_date', 'descending']]).populate('profile_id').populate('org_id').populate('job_id').exec(function(err, users) {
			
		res.json(users);
	});
})

apiRoutes.post('/jobs/updatestatus/:jobapp/:status', function(req, res) {
	var data=req.body.order;
				JobApp.findByIdAndUpdate(req.params.jobapp, { $set: { status: req.params.status }}, function (err, tank) {
				if (err) {
						res.json({ success: false });
				}
						res.json({ success: true });
				});
});



apiRoutes.post('/jobsapp/delete/:appid', function(req, res) {
	console.log('oper'+ req.params.app_id);
	JobApp.findOneAndRemove({_id : req.body.app_id}, function (err,offer){
			if (err) {
					console.log("error");
					res.send('Error in deleting profile'+ err);
				}else{
					console.log('profile deleted');
				res.json({ success: true });
				}
  });
});

//End JOB actions routes


return apiRoutes;

}